<!DOCTYPE htm PUBLIC "-//W3C//DTD Xhtm 1.0 Transitional//EN" "DTD/xhtm1-transitional.dtd"> 
<htm xmlns="http://www.w3.org/1999/xhtm" xml:lang="de" lang="de">
<head>
 <meta http-equiv="content-type" content="text/htm; charset=iso-8859-1" />
 <meta http-equiv="content-style-type" content="text/css" />
 <meta name="author" content="Arlsair" />
 <meta name="date" content="2004-01-22" />
 <title>KernelDeint</title>
 <link rel="stylesheet" type="text/css" href="../../style.css" />
</head><body>
<h1>KernelDeint</h1>

<h2>&Uuml;bersicht</h2>
<b>Autor:</b> Donald A. Graft<br />
<b>Version:</b> 1.4.0<br />
<b>Download:</b> <a href="http://neuron2.net/mine.html" target="_blank">http://neuron2.net/mine.html</a><br />
<b>Kategorie:</b> Deinterlacing &amp; Pulldown<br />
<b>Anforderungen:</b> YV12, YUY2 oder RGB Farbraum<br />
<hr size=2 width="100%" align=center>

<h2 align="center">KernelDeint Plugin for Avisynth 2.5<br>
(Version 1.4.0)</h2>
<h3 align="center">by Donald A. Graft</h3>
<p>&nbsp;
<hr>
<p>&nbsp;
<h3>Introduction</h3>
<p>This filter deinterlaces using a kernel approach. It gives greatly improved
vertical resolution in deinterlaced areas compared to simple field discarding.
<p>If you set the threshold to 0, you can get totally artifact free results (due
to lack of thresholding) but with much less loss of vertical resolution than
simple field discarding. For optimal results, however, set a motion threshold
that allows static areas of the picture to be passed through. In this mode, the
kernel-based deinterlacing of the moving areas preserves their vertical
resolution compared to simple interpolation.</p>
<p>The filter accepts RGB, YUY2, or YV12 input.</p>
<p>To use this filter as a post-processor for Telecide(), use the following
script:
<pre>
	Telecide(...,post=1,hints=true)
	KernelDeint(...)
</pre>
<p>&nbsp;
<hr size="2" width="100%" align="center">
<h3>Function Syntax</h3>
<p>KernelDeint() takes the following named parameters:</p>
<p><b><i>order</i></b> (0-1, default none!) This parameter defines the field
order of the clip. It is very important to set this correctly. Use order=0 for
bottom field first (bff). Use order=1 for top field first (tff). You must
specify order; DGBob throws an exception if you omit this parameter.</p>
<p>It is essential to set the field order properly for correct rendering.
Because setting it correctly is so important, you are strongly encouraged not to
make assumptions about the field order of a clip, but rather to verify the field
order using the following procedure.</p>
<p>To determine the field order, make an Avisynth script that serves the raw
clip without any processing. If it were an AVI, then just AviSource() would be
used. For our examples, we'll use AviSource(). Add a script line to separate the
fields using top field first, as follows:
<pre>
AviSource(&quot;your_clip.avi&quot;)
AssumeTFF().SeparateFields()</pre>
<p>Now serve the script into VirtualDub and find an area with motion. Single
step forward through the motion. Note whether the motion progresses always
forward as it should, or whether it jumps back and forth as it proceeds. For
example, if the field order is wrong, an object moving steadily from left to
right would move right, then jump back left a little, then move right again,
etc. If the field order is correct, it moves steadily to the right.</p>
<p>If the motion is correct with AssumeTFF().SeparateFields(), then your field
order is top field first and you must set order=1. If the motion is incorrect,
then your field order is bottom field first and you must set order=0. If you are
want to double check things, you can use AssumeBFF.SeparateFields() to check
correct operation for bottom field first.</p>
<p><b><i>threshold</i></b> (0-255, default 10) This parameter defines the
&quot;motion&quot; thresold. Moving areas are kernel-deinterlaced while
non-moving areas are passed through. Use the <i>map</i> parameter to tweak the <i>threshold</i>
parameter so that just the combed areas of the frame are deinterlaced.</p>
<p><b><i>sharp</i></b> (true/false, default false) This parameter, when set to
true, selects a kernel that provides better vertical resolution and performs
some sharpening of the video. For less sharpening but also less vertical
resolution, set this parameter to false.</p>
<p><b><i>twoway</i></b> (true/false, default false) This parameter, when set to
true, selects a kernel that includes both the previous and the following fields
for deinterlacing. When set to false, the kernel includes only the previous
field. The latter one-way kernel is faster, crisper, and gives less blending
(this last advantage makes the filter perform better on anime). The <i>twoway</i>
parameter is included in case users want to achieve the behavior of previous
versions.</p>
<p><b><i>map</i></b> (true/false, default false) This parameter, when set to
true, shows the areas that are &quot;moving&quot; as determined by the <i>threshold</i>
parameter and which will be kernel-deinterlaced. Use this parameter to assist in
tweaking the <i>threshold</i> parameter.
<p><b><i>debug</i></b> (true/false, default false) This parameter, when set to
true, enables debug ouput via the DebugView utility. Currently, it shows the
version number of the filter and, if hints are present from Telecide(), whether
frame are hinted as progressive or interlaced. If hints are not present, the
debug output shows all frames as interlaced.
<p>&nbsp;
<hr size="2" width="100%" align="center">
<p>Copyright © 2003, Donald A. Graft, All Rights Reserved.</p>
<p>For updates and other filters/tools, visit my web site:<br>
<a href="http://neuron2.net/" target="_top">http://neuron2.net/</a></p>
</body>
</html>
