<!DOCTYPE htm PUBLIC "-//W3C//DTD Xhtm 1.0 Transitional//EN" "DTD/xhtm1-transitional.dtd"> 
<htm xmlns="http://www.w3.org/1999/xhtm" xml:lang="de" lang="de">
<head>
 <meta http-equiv="content-type" content="text/htm; charset=iso-8859-1" />
 <meta http-equiv="content-style-type" content="text/css" />
 <meta name="author" content="Arlsair" />
 <meta name="date" content="2004-01-22" />
 <title>TomsMoComp</title>
 <link rel="stylesheet" type="text/css" href="../../style.css" />
</head><body>
<h1>TomsMoComp</h1>

<h2>&Uuml;bersicht</h2>
<b>Autor:</b> Tom Barry<br />
<b>Version:</b> 0.0.1.7<br />
<b>Download:</b> <a href="http://mywebpages.comcast.net/trbarry/downloads.htm" target="_blank">http://mywebpages.comcast.net/trbarry/downloads.htm</a><br />
<b>Kategorie:</b> Deinterlacing &amp; Pulldown<br />
<b>Anforderungen:</b>
<ul>
  <li>YV12 oder YUY2 Farbformat</li>
  <li>SSEMMX (=ISSE) f&auml;hige CPU</li>
</ul>
<hr>
<h2>Description</h2>
  TomsMoComp.dll is a filter that uses motion compensation and adaptive processing to deinterlace video source. It uses a variable amount 
  of CPU time based upon the user specified SearchEffort parameter. The SearchEffort 
  may currently be set anywhere from 0 (a smarter Bob) to about 30 (too CPU intensive for everybody). 
  Only certain values are actually implemented (currently 0,1,3,5,9,11,13,15,19,21,max) but 
  the nearest value will be used. Values above 15 have not been well tested and should probably 
  be avoided for now.
<p>TomsMoComp should run on all MMX machines or higher. It has also has some added 
  code for 3DNOW instructions for when it is running on a K6-II or higher and some 
  SSEMMX <br>
  for P3 &amp; Athlon.</p>
<p><br>
  ***************</p>
<p><strong>Sample avs script</strong>:</p>
<pre>LoadPlugin(&quot;d:\AVISynth\TomsMoComp\Release\TomsMoComp.dll&quot;)
clip = AVISource(&quot;c:\vcr\bikes.avi&quot;)
return clip.TomsMoComp(1,15,1)</pre>
<p>Of course replace the file and directory names with your own and supply the 
  desired integer values for parameters.</p>
<p>The above avs file specifies for TopFirst, SearchEffort=15, and a Vertical 
  Filter option to be turned on. I've so far tested it only with Avisynth/VirtualDub. </p>
<p>***************</p>
<p><strong>TomsMoComp Parm list</strong>:</p>
<p> TomsMoComp(TopFirst, SearchEffort, VerticalFilter)</p>
<p>All the values are integer, 0=no, 1=yes:</p>
<p> <strong>TopFirst</strong> - assume the top field, lines 0,2,4,... should be 
  displayed first. The default is the supposedly more common BottomFirst (not for me). You may
have to bring it up in Virtualdub and look at a few frames to see which looks best. (0=BottomFirst, 1=TopFirst)<br>
  <br>
  New - setting TopFirst=-1 will automatically pick up whatever Avisynth reports.
THIS DOES NOT SEEM TO WORK CORRECTLY WITH THE 2.5 ALPHA AND MPEG2DEC3 v 0.9 
  !!!</p>
<p> <strong>SearchEffort</strong> - determines how much effort (CPU time) will 
  be used to find moved pixels. Currently numbers from -1 to 30 with 0 being practically
just a smarter bob and 30 being fairly CPU intensive. <br>
  <br>
  For Avisynth only, a value of -1 is supported. In this case the TomsMoComp filter will not deinterlace but instead assume you already have progressive
frames but want to double the vertical size. I found by accident that this could
give slightly better apparent detail than regular scaling algorithms and is 
  useful for low bit rate captures that are hard to IVTC/deinterlace or where you have 
  just kept the even fields for some other reason. I'm considering making a DirectShow
version of this to be run at display time, or possibly adding it to ffDshow.</p>
<p> A VALUE OF -1 IS NOT SUPPORTED BY THE 2.5 ALPHA!!!<br>
  <br>
  <strong>VerticalFilter</strong> - If turned on will very slightly blend each 
  pair of horizontal lines together. This loses only a small amount of vertical resolution but is probably
a good idea as it can somewhat hide remaining deinterlace artifacts and will probably also make you clip compress a bit better. (0 = no filter, 1 = filter)
</p>
<p>
<h2>Known issues and limitations</h2>
<p>1) Assumes YUV (YUY2) Frame Based input. Use an Avisynth function to convert 
  first if needed. YV12 is supported by the 2.5 Avisynth Alpha version only. </p>
<p>2) Currently still requires the pixel width to be a multiple of 4. This probably
shouldn't be required but I pilfered the code from some of my other filters. Sorry, I'll fix it later.</p>
<p>3) So far it has only been tested on SSEMMX machines. (now others)</p>
<p>4) TomsMoComp is for pure video source material. Use IVTC, DeComb, or DScaler's
Auto Pulldown processing for mixed or film source material.<br>
</p>
</body>
</html>
