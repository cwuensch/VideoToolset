<html>
<head>
<title>TDeint</title>
<link rel="stylesheet" type="text/css" href="../../avisynth.css">
<!--
Automatically generated, don't change:
$Id: tdeint.htm,v 1.1 2005/07/10 16:11:01 wilbertd Exp $ 
-->
</head>
<body>
<h1>TDeint</h1>
<h2>Abstract</h2>
<b>author:</b>    tritical
<br><b>version:</b>       v1.0 beta 3<br>
<b>download:</b>   <a href="http://bengal.missouri.edu/~kes25c/">http://bengal.missouri.edu/~kes25c/</a>
<br><b>category:</b>   Deinterlacing &amp; Pulldown Removal
<br><b>requirements:</b>&nbsp;
<ul>
  <li>YV12 &amp; YUY2 Colorspace</li>
</ul>

<p><b>license:</b> GPL</p>

<hr size=2 width="100%" align=center>

<!-- #EndTemplate -->
<h2>Description</h2>
<p>TDeint is a bi-directionally, motion adaptive (sharp) deinterlacer.  It can also adaptively
choose between using per-field and per-pixel motion adaptivity.  It can use cubic interpolation,&nbsp;<br>
   kernel interpolation (with temporal direction switching), or one of two forms of modified ELA
interpolation which help to reduce "jaggy" edges in moving areas where interpolation must be used.&nbsp;
TDeint also supports user overrides through an input file, and can act as a smart bobber or same   frame rate deinterlacer, as well as an IVTC post-processor.</p>
<h3>Syntax</h3>
<p><code>TDeint</code> (clip, int <var>&quot;mode&quot;</var>, int <var>&quot;order&quot;</var>, int
<var>&quot;</var><var>field</var><var>&quot;</var>, int <var>&quot;</var><var>mthreshL</var><var>&quot;</var>, int
<var>&quot;</var><var>mthreshC</var><var>&quot;</var>, int <var>&quot;</var><var>map</var><var>&quot;</var>, string
<var>&quot;</var><var>ovr</var><var>&quot;</var>,                       int <var>&quot;</var><var>ovrDefault</var><var>&quot;</var>, int
<var>&quot;</var><var>type</var><var>&quot;</var>, bool <var>&quot;</var><var>debug</var><var>&quot;</var>, int
<var>&quot;</var><var>mtnmode</var><var>&quot;</var>, bool <var>&quot;</var><var>sharp</var><var>&quot;</var>, bool
<var>&quot;</var><var>hints</var><var>&quot;</var>,                       PClip <var>&quot;</var><var>clip2</var><var>&quot;</var>, bool
<var>&quot;</var><var>full</var><var>&quot;</var>, int <var>&quot;</var><var>cthresh</var><var>&quot;</var>, bool
<var>&quot;</var><var>chroma</var><var>&quot;</var>, int <var>&quot;</var><var>MI</var><var>&quot;</var>, bool
<var>&quot;</var><var>tryWeave</var><var>&quot;</var>, int <var>&quot;</var><var>link</var><var>&quot;</var>, bool
<var>&quot;</var><var>denoise</var><var>&quot;</var>, int <var>&quot;</var><var>AP</var><var>&quot;</var>, int
<var>&quot;</var><var>blockx</var><var>&quot;</var>, int <var>&quot;</var><var>blocky</var><var>&quot;</var>, int
<var>&quot;</var><var>APType</var><var>&quot;</var>)</p>
<h3>PARAMETERS</h3>
<p><var>mode</var>:</p>
<p>Sets the mode of operation.  Modes -2 and -1 require progressive input.</p>
<p>-2 - double height using modified ELA<br>
         -1 - double height using modified ELA-2<br>
          0 - same rate output<br>
          1 - double rate output (bobbing)</p>
<p>default -  0  (int)</p>
<p><var>order</var>:<br>
<br>
      Sets the field order of the video.</p>
<p>-1 - use parity from AviSynth<br>
         0 - bottom field first (bff)<br>
         1 - top field first (tff)</p>
<p>default -  -1  (int)</p>
<p><var>field</var>:</p>
<p>When in mode 0, this sets the field to be interpolated (i.e. the other field is kept as      is and this field will be constructed).  When in mode 1 this setting does nothing.<br>
<br>
        -1 - will set field to 1 if hints = false or 0 if hints is set to true<br>
         0 - interpolate top field (keep bottom field)<br>
         1 - interpolate bottom field (keep top field)</p>
<p>default -  -1  (int)</p>
<p><var>mthreshL</var>/<var>mthreshC</var>:</p>
<p>The motion thresholds for luma and chroma (mthreshL for luma, mthreshC for chroma). If
the difference between two pixels is less then this value they are declared static.
Smaller values will reduce residual combing, larger values will decrease flicker and
increase the accuracy of field construction in static areas.  The spatially corresponding
parts of the luma and chroma planes are linked (if link != 0), so mthreshC and mthreshL
may be somewhat interconnected.  Setting both values to 0 or below will disable motion      adaptation (i.e. every pixel will be declared moving) allowing for a dumb bob.</p>
<p>default - <var> mthreshL</var> - 6  (int)<br>
<var>                mthreshC</var> - 6</p>
<p><var>map</var>:</p>
<p>Displays an output map instead of the deinterlaced frame.  There are three possible
options.  **Note: the maps will not be displayed if the current frame is not being
deinterlaced due to overrides, <var>hints</var>, <var>full</var>=false, or <var>tryWeave</var>=true.</p>
<p>**AP post-processing is currently not taken into account when using <var> map</var> = 1 or 2.</p>
<p>0 - no map<br>
         1 - value (binary) map.  This will output a frame in which all the pixels
have one of the following values (indicating how the frame is to be constructed):<br>
                 0   (use pixel from current frame)<br>
                 51  (use pixel from previous frame)<br>
                 102 (use pixel from next frame)<br>
                 153 (use average of curr/next)<br>
                 204 (use average of curr/prev)<br>
                 255 (interpolate pixel)<br>
         2 - merged map.  This will output a frame in which all the static parts of the             frame (values 0, 51, 102, 153, and 204 from map=1) have been constructed             as they would appear in the deinterlaced frame, and the pixels that are to be             interpolated are marked in white.</p>
<p>default - 0  (int)</p>
<p><var>ovr</var>:</p>
<p>Sets the name and path to an overrides file.  When mode=0, an overrides file can be      used to control the values of mthreshL, mthreshC, field, order, and type for single
frames or for ranges of frames, as well as control which frames are deinterlaced.When mode=1, an overrides file can be used to control the values of mthreshL,
mthreshC, and type for specific frames or ranges of frames.</p>
<p>Overrides file specifiers:</p>
<p>+ = mark frame to be deinterlaced (only useful if ovrDefault = 1)<br>
            - = mark frame to not be deinterlaced<br>
            f = field<br>
            o = order<br>
            l = mthreshL<br>
            c = mthreshC<br>
            t = type</p>
<p>*The c,f,o,l,t specifiers also require a change value to be specified when             they are used (look at the overrides syntax to see how this is done)</p>
<p>Override syntax:</p>
<p>[] = not required for +,- specifiers</p>
<p>single frame override:</p>
<p>frame_number specifier [change_value]</p>
<p>examples:</p>
<pre>245 f 1
345 +
400 -
450 c -1</pre>
<p>override for range of frames:</p>
<p>start_frame_number,end_frame_number specifier [change_value]</p>
<p>examples:</p>
<pre>100,200 +
346,352 f 0
900,1200 l 5</pre>
<p>* the range is inclusive, meaning the end frame and start frame are both included</p>
<p>pattern based frame range overrides (only for +,- specifiers):</p>
<p>examples:</p>
<pre>100,300 +-+++--+++
400,456 ---+---++</pre>
<p>* will use the given pattern over the specified frame range</p>
<p>Things to remember (key points/rules):</p>
<ol>
  <li>Ranges are inclusive</li>
  <li>When mode = 1 (bobbing) all overrides except for mthreshL/mthreshC, and type
    overrides are ignored. Also, frame #'s correspond to the input clip not the                 output clip, thus one frame will be two frames in the output.</li>
  <li>The changed value is always set back to what it was originally set to                 after the override goes out of the specified range. (i.e. if you specify an                 mthresh override for frame 600 to 700 after frame 700 mthresh is set back to                 its original value automatically, you don't need to set it back in the                 overrides file!  The original value is what it is set to on load (i.e. either                 the default or what you set it to in your avisynth script).</li>
  <li>Frame numbers must be within range for the file.</li>
  <li>Frame numbers for specific specifiers must be ascending (if they are not, the                 last entry in the file takes precedence ex. if you specify 300,400 c 10 then                 later do 350,450 c 12 frames 350 to 400 will use 12 not 10).</li>
  <li>Frames numbers for the (+, -) specifiers cannot overlap (i.e. don't do                 300,400 - and then later in the file write 350,500 + or strange things will                 happen.  The other specifiers don't have to meet this requirement as they all                 effect different things.</li>
  <li>+, - specifiers require no change value.</li>
  <li>The spacing is important! Just look at the examples.</li>
  <li>Only +, - specifiers can be used in pattern specifications.</li>
  <li>You can change multiple specifiers over the same frame range as long as you follow                 the rules above (+,- ascending frame numbers for example).</li>
  <li>You can comment out a line (i.e. it will be ignored) by adding a '#' or ';' to
    the beginning of the line.</li>
  <li>Entering 0 as the end_frame for a range of frames is taken as meaning the last
    frame of the video.</li>
</ol>
<p>Example overrides file:&nbsp;</p>
<p>              Syntax example =>
TDeint(order=1,ovr=&quot;c:\path\myoverridesfile.txt&quot;)</p>
<pre>100,300 o 0
100,300 f 1
90,250 c 3
40,500 -
505 -
300,700 l -1
#700,3000 f 1 &lt;- commented out, will be ignored
800,1000 -++-
500,1000 c 13</pre>
<p>default - ""  (string)</p>
<p><var>ovrDefault</var>:</p>
<p>When using an overrides file in mode 0, this specifies the default action for all frames
in the video.  Using ovrDefault=1 makes it easy to deinterlace only a few specific frames      in a video.  When mode = 1 this setting does nothing.</p>
<p>0 - all frames not specified as '-' in the overrides file are deinterlaced<br>
         1 - all frames not specified as '+' in the overrides file are not deinterlaced and simply returned as is</p>
<p>default - 0  (int)</p>
<p><var>type</var>:</p>
<p>Sets the type of interpolation to use.  Cubic is the fastest, modified ELA and ELA2 will give
smoother, less "jaggy", edges and are the slowest (ELA2 is faster), and kernel interpolation&nbsp;<br>
      will cause significantly less flickering then cubic or ela when interpolation gets used in      almost static areas.  Modified ELA/ELA2 works best with anime/cartoon type material... it is not<br>
      that great with real life sources (sometimes it is, test for yourself).</p>
<p>0 - cubic interpolation<br>
         1 - modified ELA interpolation<br>
         2 - kernel interpolation (can be normal or sharp, controlled by the sharp setting)<br>
         3 - modified ELA-2 interpolation</p>
<p>default - 2  (int)</p>
<p><var>debug</var>:</p>
<p>Will enable debug output, which for each frame will list the values of order, field,      mthreshL, mthreshC, and type if the frame is being deinterlaced.  If the frame is
not being deinterlaced (due to user overrides, hints, or full=false) it will simply      say the frame is not being deinterlaced and list the specific reason. If the output
frame is weaved, then debug output will report which field the current field was
weaved with (PREV or NEXT).</p>
<p>default - false  (bool)</p>
<p><var>mtnmode</var>:</p>
<p>Controls whether a 4 field motion check or a 5 field motion check is used.  5 field      will prevent more artifacts and can deal with duplicate interlaced frames, however
it is quite a bit slower then the 4 field motion check.  Modes 2 and 3 are like 0 and
1 except that in areas where an average of the prev and next field would have been
used in mode 0 or 1, the pixel value from the most similar field (computed via field      differencing) is used instead (i.e. no averages are used).</p>
<p>0 - 4 field check<br>
         1 - 5 field check<br>
         2 - 4 field check (no averages, replace with most similar field)<br>
         3 - 5 field check (no averages, replace with most similar field)</p>
<p>default - 1  (int)</p>
<p><var>sharp</var>:</p>
<p>Controls whether the sharp or normal kernel is used when using kernel interpolation (type
= 2).  The sharp kernel includes more pixels and produces a sharper result, but is
slightly slower.</p>
<p>true - use sharp kernel<br>
         false - use normal kernel</p>
<p>default - true  (bool)</p>
<p><var>hints</var>:</p>
<p>Read hints from telecide or tfm indicating which frames are interlaced and which are not if
hints are present in the video stream.  To make this work you need to set post=1 in telecide&nbsp;<br>
      or PP=1 in tfm and put TDeint immediately afterwards.  TDeint will not effect the hints (as long      as your video has a width of at least 64 pixels) in case any filters later on need to&nbsp;<br>
      read them.  If hints is set to true, but no hints from telecide or tfm are detected in the
video stream, then all frames will be deinterlaced (TDeint will operate as if hints=false).<br>
      If you do not specify a value for hints explicitly, then TDeint will check to see if hints
are present in the stream on load and set hints to true if they are, or set it to false<br>
      if not (i.e. it is automatically set).</p>
<p>*NOTE:  for IVTC post-processing by reading hints it is recommended to use TDeint in
the following fashion making use of the clip2 parameter.</p>
<pre>orig = last
fieldmatcher()
TDeint(clip2 = last)</pre>
<p>true - read hints if present<br>
         false - don't read hints</p>
<p>default - automatically detected on load  (bool)</p>
<p><var>clip2</var>:</p>
<p>If using tdeint as a postprocessor for telecide or tfm via the hints parameter (or any field
matcher), incorrect deinterlacing can occur due to the fact that telecide changes the&nbsp;<br>
      order of the fields in the original stream (it is a field matcher after all).  This can      cause problems in some cases since TDeint really needs to have the original stream.  To&nbsp;<br>
      work around this you can specify a second clip "clip2" for TDeint to do the actual      deinterlacing from.</p>
<p>In a script this is how it would work:</p>
<pre>mpeg2source(&quot;c:\mysource.d2v&quot;)
orig = last
telecide(guide=1, order=1, hints=true, post=1)
tdeint(order=1, clip2=orig)</pre>
<p>So TDeint reads the output clip from telecide as usual.  When hints indicate an interlaced
frame, it does the deinterlacing of the frame using clip2.  This method also perserves the<br>
      hints in the output stream so any other filters that need them later on will still
work.</p>
<p>With the addition of full=false, another way to use TDeint as a post-processor is to
have it use its own combed frame detection as follows (this also allows it to work with<br>
      any field matcher, not just telecide or tfm):</p>
<pre>mpeg2source(&quot;c:\mysource.d2v&quot;)
orig = last
fieldmatcherofchoice()
tdeint(order=1, full=false, clip2=orig)</pre>
<p>default - NULL  (PClip)</p>
<p><var>full</var>:</p>
<p>If full is set to true, then all frames are processed as usual.  If full=false, all frames
are first checked to see if they are combed.  If a frame isn't combed then it is returned&nbsp;<br>
      as is.  If a frame is combed then it is processed as usual.  The parameters that effect      combed frame detection are cthresh, chroma, blockx, blocky, and MI.  Full=false allows&nbsp;<br>
      TDeint to be an ivtc post-processor without the need for hints.</p>
<p>true - normal processing<br>
         false - check all input frames for combing first</p>
<p>default - true  (bool)</p>
<p><var>cthresh</var>:</p>
<p>Area combing threshold used for combed frame detection.  It is like dthresh or dthreshold
in telecide() and fielddeinterlace().  This essentially controls how "strong" or "visible"<br>
      combing must be to be detected.  Good values are from 6 to 12, if you know your source has      a lot of combed frames set this towards the low end (6-7), if you know your source has<br>
      very few combed frames set this higher (10-12).  Going much lower then 5 to 6 or much      higher then 12 is not recommended.</p>
<p>default - 6  (int)</p>
<p><var>blockx</var> -</p>
<p>Sets the x-axis size of the window used during combed frame detection.  This has to do with      the size of the area in which MI number of pixels are required to be detected as combed for      a frame to be declared combed.  See the MI parameter description for more info.  Possible      values are any number that is a power of 2 starting at 4 and going to 2048 (i.e. 4, 8, 16,&nbsp;<br>
      32, ... 2048).</p>
<p>Default:  16  (int)</p>
<p><var>blocky</var> -</p>
<p>Sets the y-axis size of the window used during combed frame detection.  This has to do with      the size of the area in which MI number of pixels are required to be detected as combed for      a frame to be declared combed.  See the MI parameter description for more info.  Possible      values are any number that is a power of 2 starting at 4 and going to 2048 (i.e. 4, 8, 16,&nbsp;<br>
      32, ... 2048).</p>
<p>Default:  16  (int)</p>
<p><var>chroma</var>:</p>
<p>Includes chroma combing in the decision about whether a frame is combed.  Only use this if
you have one of those weird sources where the chroma can be temporally separated from the luma
(i.e. the chroma moves but the luma doesn't in a field).  Otherwise it will just end up&nbsp;
screwing up the decision most of the time.</p>
<p>true - include chroma combing<br>
         false - don't</p>
<p>default - false  (bool)</p>
<p><var>MI</var>:</p>
<p># of combed pixels inside any of the blockx by blocky sized blocks on the frame for the      frame to be considered combed.  While cthresh controls how "visible" or "strong" the combing&nbsp;<br>
      must be, this setting controls how much combing there must be in any localized area (a      blockx by blocky sized window) on the frame.  Min setting = 0, max setting = blockx x blocky<br>
      (at which point no frames will ever be detected as combed).</p>
<p>default - 64  (int)</p>
<p><var>tryWeave</var>:</p>
<p>If set to true, when TDeint deinterlaces a frame it will first calculate which field
(PREV or NEXT) is most similar to the current field.  It will then weave this field
to create a new frame and check this new frame for combing.  If the new frame is not
combed, then it returns it. If it is, then it deinterlaces using the usual per-pixel
motion adaptation.  Basically, this setting allows TDeint to try to use per-field
motion adaptation instead of per-pixel motion adaptation where possible.</p>
<p>default - false  (bool)</p>
<p><var>link</var>:</p>
<p>Controls how the three planes (YUV) are linked during comb map creation. Possible<br>
      settings:</p>
<p>0 - no linking<br>
        1 - Full linking (each plane to every other)<br>
        2 - Y to UV (luma to chroma)<br>
        3 - UV to Y (chroma to luma)</p>
<p>default - 2  (int)</p>
<p><var>denoise</var>:</p>
<p>Controls whether the comb map is denoised or not.  True enables denoising, false disables.</p>
<p>default - true  (bool)</p>
<p><var>AP</var>:</p>
<p>Artifact protection threshold.  If AP is set to a value greater than or equal to 0, then
before outputting a deinterlaced frame TDeint will scan all weaved pixels to see if any<br>
      create a value greater then AP.  Any pixels that do will be interpolated.  Use this to
help prevent very obvious motion adaptive related artifacts, a large value is recommended
(25+, or as large as removes the artifacts that can be seen during full-speed playback) as      smaller values will destroy the benefits of motion adaptivity in static, detailed areas.
The AP metric is the same as the cthresh metric so the scale is 0-255... at zero everything
but completely flat areas will be detected as combing, at 255 nothing will be detected.
Using AP will slow down processing. Set AP to a value less then 0 or greater than
254 to disable.</p>
<p>default - -1 (disabled)  (int)</p>
<p><var>APType</var>:</p>
<p>When AP post-processing is being used (AP is set >= 0 and &lt; 255), APType controls whether
the motion of surrounding pixels should be taken into account.  There are 3 possible      settings:</p>
<p>0 = Don't take surrounding motion into account.  If a weaved pixel creates a value that
exceeds the AP threshold then it will be interpolated.</p>
<p>1 = If a weaved pixel creates a value that exceeds the AP threshold and at least half of
pixels in a 5x5 window centered on that pixel were detected as moving, then that
pixel will be interpolated.</p>
<p>2 = Exactly like 1, except instead of 1/2 only 1/3 of the pixels in the surrounding 5x5
window must have been detected as moving.</p>
<p>Modes 1 and 2 provide a way to catch more artifacts (low AP values) without completely
sacrificing static areas.</p>
<p>default -  1  (int)</p>
<h2>Changelog</h2>
<p>   05/14/2004  v1.0 beta 3<br>
       + Added APType parameter, adds 2 new AP post-processing modes that take surrounding motion
into account<br>
       + Small changes (hopefully improvements) to type 3 (ELA-2) interpolation</p>
<p>04/26/2005  v1.0 beta 2<br>
       + Added modes -2 and -1... will upsize vertically by a factor of 2 using ELA or ELA2<br>
       + Call SetCacheHints in filter constructor<br>
       + Some small optimizations, should give a very small speed up</p>
<p>04/23/2005  v1.0 beta 1<br>
       + Added AP threshold and post-processing<br>
       + Added blockx and blocky for variable window size during combed frame detection<br>
       - Changed default MI value to 64 (default window size is now 16x16 = 256 pixels)<br>
       - changed default cthresh value to 6<br>
       - Small change to denoising routine</p>
<p>04/20/2005  v0.9.7.2<br>
       - Fixed not correctly using the field information from tfm's hints when acting as
a post-processor for it.  Also fixed not correctly altering the match info of tfm's hints when acting as a post-processor for it (PP=1 in tfm).<br>
       + Improvements to type 3 interpolation, renamed to modified ELA-2</p>
<p>03/10/2005  v0.9.7.1<br>
       + Fixed not correctly reading hints from newer versions of tivtc and if colorimetry
hints were present from dgdecode.</p>
<p>01/20/2005  v0.9.7<br>
       + Added link and denoise parameters, link defaults to 2 and denoise to true<br>
       + Added ELA interpolation (tomsmocomp version) as type = 3<br>
       + Hints option can now read hints from tfm as well as telecide<br>
       + map = 2 now sets the chroma pixels that are to be interpolated to 255 and not just the luma<br>
       - Changed default type value to 2 (kernel interpolation)<br>
       - Changed default tryWeave value to false</p>
<p>10/03/2004  v0.9.6<br>
       + Added full parameter, allows for ivtc post-processing.  full defaults to true.<br>
       + Added cthresh, chroma, and MI parameters... these are used when full=false<br>
       + Added tryWeave option, allows TDeint to adaptively switch between per-field
and per-pixel motion adaptation.  tryWeave defaults to true.<br>
       + Improved field differencing<br>
       + changed mtnmode default to 1</p>
<p>09/26/2004  v0.9.5<br>
       + Sped up mtnmodes 2 and 3, was doing it the hard way and not the easy way...</p>
<p>09/25/2004  v0.9.4<br>
       + Added auto hints detection<br>
       + Added mtnmodes 2 and 3<br>
       + Added ability to deinterlace from the original stream when using hints via
clip2 parameter<br>
       - Fixed field differencing using the wrong fields doh!</p>
<p>09/18/2004  v0.9.3<br>
       + Added order = -1 option, will detect parity from avisynth<br>
       + Added hints option for reading telecide hints for interlaced/progressive<br>
       + 5 field motion check now includes checks over 4 field distances<br>
       - Fixed a bug in YUY2 type = 1 deinterlacing method</p>
<p>09/14/2004  v0.9.2<br>
       + Added kernel interpolation and sharp parameter<br>
       + Added 5 field motion check and mtnmode parameter<br>
       + Changed default motion thresholds to 6</p>
<p>09/12/2004  v0.9.1<br>
       - Fixed some really stupid bugs, one motion check was incorrect for the first
and last frame of a clip, and mode = 1 would only work for the first half of the video</p>
<p>09/12/2004  v0.9<br>
       - Initial Release</p>
<p><kbd>$Date: 2005/07/10 16:11:01 $</kbd>
</p>
</body>
</html>
