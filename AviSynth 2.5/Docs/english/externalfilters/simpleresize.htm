<html>
<head>
<title>SimpleResize</title>
<link rel="stylesheet" type="text/css" href="../../avisynth.css">
<!--
Automatically generated, don't change:
$Id: simpleresize.htm,v 1.3 2005/06/09 20:43:30 fizick Exp $ 
-->
</head>
<body>
<h1>SimpleResize</h1>
<h2>Abstract</h2>
<b>author:</b> Tom Barry
<br><b>version:</b> 0.3.3.0
<br><b>download:</b> <a href="http://mywebpages.comcast.net/trbarry/downloads.htm">http://mywebpages.comcast.net/trbarry/downloads.htm</a><br>
<b>category:</b> Resizers
<br><b>requirements:</b> YV12 &amp; YUY2 Colorspace
<hr>
<h2>Description</h2>
SimpleResize is an Avisynth filter that will do a very simple 2 tap linear interpolation. It is unfiltered which means it will not soften much.
<p><code>InterlacedResize</code> &amp; <code> InterlacedWarpedResize</code> are designed to work on interlaced 
materiel ( more at the end of the doc )</p>
<p>It's main advantage is that it will run somewhat faster than some of the others.</p>
<h3>To use it just</h3>
<p> In you Avisynth file use command similar to </p>
<pre>LoadPlugin(&quot;F:\SimpleResize\SimpleResize.dll&quot;)
Avisource(&quot;D:\wherever\myfile.avi&quot;)
SimpleResize(width, height)</pre>
<p> Of course replace the file and directory names with your own and supply the 
  integer values for <var>width</var> &amp; <var>height</var>. </p>
<p><code>SimpleResize</code> should run on all MMX machines. It has also has some added (optional)
code for SSE2 instructions for when it is running on a P4 and some SSEMMX for 
  P3 &amp; Athlon, though it could maybe use some more. But sorry, no plans for extra 
  3DNow code.</p>
<h3>WarpedResize</h3>
<p><code>WarpedResize</code> is also included in the SimpleResize.dll. <code>WarpedResize</code>
will do 
  a non-linear stretch/squeeze in both the horizontal and vertical dimensions. This can be 
  useful when you want to change the aspect ratio of a video clip and have it mostly distorted 
  at the top, bottom, and side edges. This is mostly experimental but I added it because 
  it required few code changes and almost Zero performance penalty. Use as:</p>
<pre>LoadPlugin(&quot;F:\SimpleResize\SimpleResize.dll&quot;)
AviSource(&quot;D:\wherever\myfile.avi&quot;)
WarpedResize(width, height, hWarp, vWarp)</pre>
<p>where <var>hWarp</var> &amp; <var>vWarp</var> are the horizontal 
  and vertical warp factors. These are real number, usually between .8 and 1.3 that determine how non-linear you really want the 
  output to be.</p>
<p>Values above 1.0 cause the output image to be stretched more in the middle 
  and squeezed at the edges. Values below 1.0 will do the reverse. Specifying 1.0 for either 
  of them will do a linear resize in that dimension, just as you would get using
<code>SimpleResize</code>.
Values far from 1.0 will give some very strange results. See the &quot;Notes 
  to Mathematicians&quot; below.</p>
<p>One reason to use <code>WarpedResize</code> would be when you have a clip with a 16:9 aspect 
  ratio and want to resize it for a 4:3 aspect ratio display without either clipping off 
  valuable info or having to display black bars. (or vice versa)</p>
<p>An example image of using <code>WarpedResize</code> for this can be found (for now) at <a href="http://www.trbarry.com/warptest.jpg"><cite>www.trbarry.com/warptest.jpg</cite></a>. 
  This image was from a short HDTV digital capture that was at a 1280x720 resolution, a 16:9 aspect ratio. It was downsized and warped to 
  a 640x480 4:3 aspect ratio using the following script command:</p>
<pre>WarpedResize(640,480,1.15,0.95))</pre>
<p>Also, for an example of a 4:3 capture warped to fit on a 16:9 screen see <a href="http://www.trbarry.com/Warptest2.jpg"><cite>www.trbarry.com/Warptest2.jpg</cite></a></p>
<h3>Current limitations, for SimpleResize/WarpedResize</h3>
<p>1) Only YUY2 color mode is currently supported. Add a ConvertToYuY2 command 
  first if needed.</p>
<p>2) The target width NO LONGER must be a multiple of 4 pixels.</p>
<p>3) It will run faster on SSE2 machines if the target width is a multiple of 
  8 pixels and if the data starts on an 8 pixel boundary. I don't know if prior Clip() 
  commands affect this or not.</p>
<p>4) If anyone knows how to make a DirectShow filter out of this I'd sure like 
  to have one. ;-)</p>
<h3>Notes to Mathematicians: (and questions)</h3>
<p>Imagine the screen was dimensions that went from -1.0 to 1.0. We'll only consider 
  the horizontal dimension for the moment and only the right hand half of the screen. 
  Assume we want to calculate the value of an output pixel at location x, where 0 &lt;= 
  x &lt;=1.</p>
<p>The output value will be the source value from the input screen with the same 
  dimensions, at location s. Right now I'm just calculating s = (1-w) * x^3 + w * x, where w 
  is the warp factor mentioned above (Later note: w = 2 - warp factor, for compat with first release). 
  This gets the job done and produces smooth numbers from 0 to one, without too much
distortion 
  as long as w is close to 1.0. </p>
<p>The same formula is reflected for the left half of the screen.</p>
<p>The warp equations are designed to:</p>
<p>* Always be rising but yield results from 0 to 1</p>
<p>* Have a first derivative that doesn't go to 0 or infinity, at least close to the center of the screen</p>
<p>* Have a curvature (absolute val of 2nd derivative) that is small in the center and smoothly rises towards the edges. We would like the curvature
to be everywhere = 0 when the warp factor = 1</p>
<p>Now, as near as I can tell the curvature is more or less just the absolute 
  value of the second derivative. So if we wanted the curvature to be small when x = 0 and 
  to grow toward the edges, what could be a useful warp function? The above function already
represents a change since V 0.1 but I'm still not so sure it's the best. </p>
<p>It is easy to drop in another warp function. And there is no performance penalty
either way because it's just calculated and tabled at startup. After that it 
  runs at the same speed as SimpleResize.</p>
<p>Anyone have any ideas? (Anybody care about this part?)</p>
<h3>InterlacedResize and InterlacedWarpedResize</h3>
<p>If you want to resize an interlace source you can instead use:</p>
<p><code>InterlacedResize</code> (<var>width, height</var>)</p>
<p>or</p>
<p><code>InterlacedWarpedResize</code> (<var>width, height, hWarp, vWarp</var>)</p>
<p>These have the same paramaters as before but are designed to operate on interlaced 
  source, without either blending even/odd data or messing up the coordinates because 
  of the even/odd line offsets. Theoretically these can lose a small amount of vertical 
  detail or confuse a subsequent deinterlace or IVTC function but so far in my own testing 
  I have not found it to be a problem.</p>
<p>So if you intend to keep your video in interlaced form, certainly use these. 
  And if you are downsizing you may find that doing the InterlacedResize first before 
  a more costly deinterlacing step can give you a small performance advantage on other 
  material. But this is still experimental. YMMV.
</p>
<p><kbd>$Date: 2005/06/09 20:43:30 $</kbd></p>
</body>
</html>
