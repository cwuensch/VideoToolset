<html>
<head>
<title>TBilateral</title>
<link rel="stylesheet" type="text/css" href="../../avisynth.css">
<!--
Automatically generated, don't change:
$Id: tbilateral.htm,v 1.1 2005/07/10 16:11:01 wilbertd Exp $ 
-->
</head>
<body>
<h1>TBilateral</h1>
<h2>Abstract</h2>
<b>author:</b>    tritical
<br><b>version:</b>       0.9.10<br>
<b>download:</b>   <a href="http://bengal.missouri.edu/~kes25c/">http://bengal.missouri.edu/~kes25c/</a>
<br><b>category:</b>   Spatial Smoothers
<br><b>requirements:</b>&nbsp;
<ul>
  <li>YV12 &amp; YUY2 Colorspace</li>
</ul>

<p><b>license:</b> GPL</p>

<hr size=2 width="100%" align=center>

<!-- #EndTemplate -->
<h2>Description</h2>
<p>      TBilateral is a spatial smoothing filter that uses the bilateral filtering algorithm.  It does&nbsp;a nice job of smoothing while retaining picture structure.  It currently supports YV12 and YUY2&nbsp;<br>
   colorspaces and has a gui with preview to help with tweaking.</p>
<h3>Syntax</h3>
<p><code>TBilateral</code> (clip, int <var>&quot;diameterL&quot;</var>, int <var>&quot;diameterC&quot;</var>, float
<var>&quot;sDevL&quot;</var>, float <var>&quot;sDevC&quot;</var>, float <var>&quot;iDevL&quot;</var>, float
<var>&quot;iDevC&quot;</var>,                      float <var>&quot;csL&quot;</var>, float
<var>&quot;csC&quot;</var>, bool <var>&quot;d2&quot;</var>, bool <var>&quot;chroma&quot;</var>, bool
<var>&quot;gui&quot;</var>, PClip <var>&quot;ppClip&quot;</var>, int <var>&quot;kernS&quot;</var>, int
<var>&quot;kernI&quot;</var>, int <var>&quot;resType&quot;</var>)</p>
<h3>PARAMETERS</h3>
<p><var>diameterL</var>/<var>diameterC</var> -  (spatial diameters)</p>
<p>This sets the size of the diameter of the filtering window.  Larger values mean more pixels
will be included in the average, but are also slower.  Must be an odd number greater then 1.<br>
      diameterL is for luma and diameterC is for chroma if it is being processed.  This must be
less then the width of the video and less then the height of the video.</p>
<p>default - <var>diameterL</var> = 5 (int)<br>
<var>diameterL</var> = 5 (int)</p>
<p><var>sDevL</var>/<var>sDevC</var> - (spatial (domain) deviations)</p>
<p>These set the spatial deviations.  The larger sDev is, the less effect distance will have in the      weighting of pixels in the average.  That is, as you increase sDev distant pixels will have more      weight.  sDevL is for luma and sDevC is for chroma.  These must be greater then 0.
To get a better idea of what these settings do try setting iDevL/iDevC to high values, and then&nbsp;<br>
      gradually increase sDevL/sDevC from 0 on up while keeping iDevL/iDevC constant.  Increasing these
settings will increase the strength of the smoothing.</p>
<p>default - <var>sDevL</var> = 1.4  (float)<br>
<var>sDevC</var> = 1.4  (float)</p>
<p><var>iDevL</var>/iDevC - (pixel intensity (range) deviations)</p>
<p>These set the pixel intensity deviations (or color deviations in the case of the chroma planes).
The larger iDev is, the less effect pixel difference will have in the weighting of pixels in the
average.  That is, as you increase iDev pixels that are very different from the current pixel will
have more weight.  iDevL is for luma and iDevC is for chroma.  These must be greater then 0.      Try increasing these settings while keeping sDev/sDevC constant to get a better idea of what these      do.  Increasing these settings will increase the strength of the smoothing.</p>
<p>default - <var>iDevL</var> = 7.0  (float)<br>
<var>iDevC</var> = 7.0 (float)</p>
<p><var>csL</var>/<var>csC</var> - (center pixel weight multipliers)</p>
<p>These values are multiplied to the center pixel's spatial weight value.  A value of 1 does
nothing, &lt; 1 means the center pixel will have less weight then normal, > 1 means the center<br>
      pixel will have more weight then nomral, 0 gives the center pixel no weight.  These must be      at least 0.  Setting csL/csC to 0 will give you SUSAN denoising.</p>
<p>default - <var>csL</var> = 1.0  (float)<br>
<var>csC</var> = 1.0  (float)</p>
<p><var>d2</var> - (second derivative or first derivative)</p>
<p>This setting makes TBilateral use the second derivative instead of the first when doing the      intensity calculations.  Using d2 should give better results on smooth gradients or anything that
fits the piecewise linear model.  Setting d2 to false will give better results on images
that have uniformly colored areas with sharp edges (anything that fits the piecewise constant<br>
      model).  The actual difference between the two is usually not big for most sources.  The
effect is rather subtle.</p>
<p>default - false  (bool)</p>
<p><var>chroma</var> - (enable chroma processing)</p>
<p>If set to true the chroma planes are processed.  If set to false the chroma planes from the
source are simply copied to the final output frame.</p>
<p>default - true  (bool)</p>
<p><var>gui</var> - (gui interface)</p>
<p>If set to true, then this instance of TBilateral will start with a gui.  Only one instance
of TBilateral per script can have a gui.  The gui allows you to change the values of<br>
      diameterL/diameterC/sDevL/sDevC/iDevL/iDevC/csL/csC/d2/chroma/kernS/kernI/resType (basically      every setting). The gui also has a real time updating preview which allows you to see the effect      of changes as you make them.&nbsp;</p>
<p>      The gui does have some restrictions though. The diameterL/diameterC values are currently      limited to a maximum of 21 when using the gui interface.  Also, the Dev sliders have maximum
limits associated with them to allow the use of the slider bars to tweak them.  However, these
maximums should be plenty high to allow even very strong filtering.</p>
<p>After you have found the settings you want you can close the gui by hitting the "OK" button.
At the bottom of the advanced tab there is string which you can copy and paste in your avs
script to duplicate the current settings. (NOTE:  the ppClip parameter is not set in this string)</p>
<p>default - false (bool)</p>
<p><var>ppClip</var> - (pre-process clip)</p>
<p>Specifies a pre-filtered clip for TBilateral to take pixel values from when doing the
luminance difference calculations.  The general recommendation for pre-processing is<br>
      a gaussian blur with standard deviation equal to the sDev settings being used.  Using a
prefiltered clip should help in removing impulse noise (i.e. outliers with very<br>
      large pixel differences) which standard bilateral filtering will not touch.  It does tend
to produce artifacts sometimes, especially around very fine details.  Another recommendation<br>
      for pre-processing is a center-weighted median or adaptive median.</p>
<p>default - NULL (PClip)</p>
<p><var>kernS</var>/<var>kernI</var> - (domain (spatial) and range (intensity) kernels)</p>
<p>These specify what kernel is used for the domain (kernS) weights and range (kernI) weights.  The
possible choices are:</p>
<p>0 - Andrews' wave<br>
          1 - El Fallah Ford<br>
          2 - Gaussian<br>
          3 - Huber’s mini-max<br>
          4 - Lorentzian<br>
          5 - Tukey bi-weight<br>
          6 - Linear descent<br>
          7 - Cosine<br>
          8 - Flat<br>
          9 - Inverse</p>
<p>See the following paper for a description of all the kernels and their properties:</p>
<p><a href="http://dsp7.ee.uct.ac.za/~jfrancis/publicationsDir/PRASA2003.pdf">http://dsp7.ee.uct.ac.za/~jfrancis/publicationsDir/PRASA2003.pdf</a></p>
<p>Gaussian (option 2) is the kernel used by the default (first proposed) bilateral filter.</p>
<p>default - 2 (<var>kernS</var>)  (int)<br>
                2 (<var>kernI</var>)</p>
<p><var>resType</var> -</p>
<p>This specifies how the weights and pixel values are combined to obtain the final result.
Possible options:</p>
<p>0 - Mean (weighted average)<br>
          1 - Median  (weighted median)<br>
          2 - CW-Median  (weighted median + extra center pixel weight)</p>
<p>Option 0 (weighted average) is the type used by the default bilateral filter.</p>
<p>default - 0  (int)</p>
<h2>Changelog</h2>
<p>06/23/2005  v0.9.10<br>
       + some optimizations, roughly 15-20% speed increase<br>
<br>
   06/21/2005  v0.9.9<br>
       + Added Inverse kernel (what was called "Linear Descent" in v0.9.8 was, in fact, "Inverse")<br>
       - Fixed a bug in the gui routine that set the sDevL/sDevC slider maximums<br>
<br>
   06/20/2005  v0.9.8<br>
       + Added kernS, kernI, and resType<br>
       + Redid the gui interface<br>
       - Lots of cosmetic fixes for the gui (for some options it wouldn't immediately update on change)<br>
<br>
   05/24/2005<br>
       + Added ppClip parameter and processing<br>
       - Changed some default values<br>
       - Fixed a few thread sync/exit problems with the gui code<br>
<br>
   05/02/2005  v0.9.6<br>
       + Added gui with preview<br>
       + Removed all yuy2 restrictions (d2)<br>
       - Fixed iDev settings and sDev settings being switched when calculating the weight tables (doh!)<br>
<br>
   06/16/2004  v0.9.5<br>
       - Fixed iDevC having an i instead of f inside the function param list and only excepting<br>
            integer values.<br>
<br>
   06/16/2004  v0.9.4<br>
       - Fixed the rouding errors with d2 = true, which could have led to +-2 change in the final<br>
            pixel values<br>
       - The change needed for the rounding fix also sped up d2 = true processing 10-15%<br>
<br>
   06/15/2004  v0.9.3<br>
       - Added d2 and centerScale/centerScaleC parameters.<br>
       - Unrolled yloops, no real speed up, but it did make the code huge...<br>
<br>
   06/12/2004  v0.9.2<br>
       - Unrolled xloops in YV12 and the luma only version of YUY2.  Slight speed up.<br>
<br>
   06/11/2004  v0.9.1<br>
       - Fixed a problem with boundary pixels near the egdes of the picture getting incorrect spatial&nbsp;<br>
            weights.<br>
<br>
   06/11/2004  v0.9.0<br>
       - Initial Release</p>
<p><kbd>$Date: 2005/07/10 16:11:01 $</kbd>
</p>
</body>
</html>
