<!doctype html public "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title>Layer Avisynth Filter</title>
<link rel="stylesheet" type="text/css" href="../../avisynth.css">
</head>
<body >
<h2><a name="Layer"></a>Layer <em>[yuy2][rgb32]</em></h2>
<p><code>Layer </code>(<var>base_clip, overlay_clip, string &quot;op&quot;, int &quot;level&quot;, 
  int &quot;x&quot;, int &quot;y&quot;, int &quot;threshold&quot;, bool &quot;use_chroma&quot;</var>)</p>
<p>This filter can overlay two clips of different sizes (but with the same color 
  format) using different operation modes.<br>
  For pixel-wise transparency information the 4th color channel of RGB32 (A- or 
  alpha-channel) is used as a mask.</p>
<p><var>Base_clip</var>: the underlying clip which determines the size and all other 
  video and audio properties of the result.<br>
  <var>Overlay_clip</var>: the clip which is merged onto clip. This clip can contain an alpha layer.<br>
  <var>op</var>: the performed merge operation, which can be: &quot;add&quot;, &quot;subtract&quot;, 
  &quot;brighten&quot;, &quot;darken&quot;, &quot;fast&quot;, &quot;mul&quot;<br>
  <var>level</var>: 0-255, the strength of the performed operation. 0: the base_clip 
  is returned unchanged, 255: the maximal strength is used<br>
  <var>x, y</var>: offset position of the overlay_clip<br>
  <var>threshold</var>: only implemented for &quot;lighten&quot; and &quot;darken&quot;<br>
  <var>use_chroma</var>: use chroma of the overlay_clip, default=true. When false 
  only luma is used.</p>
<p>There are some differences in the behaviour and the allowed parameter depending 
  on the color format and the operation, here are the details:</p>
<ul>
  <li>There is no mask (alpha-channel) in YUY2, so the alpha-channel is assumed 
  to be opaque everywhere.<br>
  </li>
  <li>in RGB32 the alpha-channel of the <var>overlay_clip</var> is multiplied with 
  <var>level</var>, so the resulting alpha = (alpha_mask * level) / 256. This means 
  for full strength of operation BOTH alpha and <var>level</var> have to be 255.</li>
</ul>
<p>These operators behave equally for RGB32 or YUY2:</p>
      <pre>&quot;fast&quot;: <i>use_chroma</i> must be TRUE, <i>level</i> and <i>threshold</i> is not used.
        The result is simply the average of <i>base_clip</i> and <i>overlay_clip</i>.

&quot;add&quot;:  <i>threshold</i> is not used. The difference between base_clip and overlay_clip is
        multiplied with alpha and added to the base_clip.
        alpha=0 -&gt; only base_clip visible,
        alpha=128 -&gt; base and overlay equally blended,
        alpha=255 -&gt; only overlay visible.

&quot;subtract&quot;: the same as add, but the overlay_clip is inverted before.</pre>
    <p>These operators seem to work correctly only in YUY2:</p>
      <pre>&quot;mul&quot;: <i>threshold</i> is not used. The base_clip is colored as overlay_clip, so <i>use_chroma</i> should be TRUE.
       alpha=0 -&gt; only base_clip visible, alpha=255 -&gt; approx. the same Luminance as Base
       but with the colors of Overlay

&quot;lighten&quot;: <i>use_chroma</i> must be TRUE. Performs the same operation as &quot;add&quot;, but only when
           the result is BRIGHTER than the base the new values are used.
           With a higher <i>threshold</i> the operation is more likely,
           so with <i>threshold</i>=255 it's the same as &quot;add&quot;,
           with threshold=0 the base_clip is more likely passed unchanged,
           depending on the difference between base_clip and overlay_clip.

&quot;darken&quot;:  the same as &quot;lighten&quot;, but it is performed only when the result is DARKER than the base.</pre>
    
<p><br>
Also see <a href="../syntax.htm#multiclip" target="_self">here</a> for the resulting 
clip properties.</p>
<p>&nbsp;
</p>
<h2><a name="Mask"></a>Mask 
  <em>[rgb32]</em></h2>
<p><code>Mask </code>(<var>clip, mask_clip</var>)</p>
<p>Applies a defined alpha-mask to <var>clip</var>, for use with <code>Layer</code>, by 
  converting <var>mask_clip</var> to greyscale and using that for the mask (the alpha-channel) 
  of RGB32. In this channel &quot;black&quot; means completely transparent, white 
  means completely opaque).
</p>
<p>&nbsp;
</p>
<h2><a name="ResetMask"></a>ResetMask <em>[rgb32]</em></h2>
<p><code>ResetMask </code>(<var>clip</var>)</p>
<p>Applies an &quot;all-opaque&quot; alpha-mask to <i>clip</i>, for use with <tt>Layer</tt>.<br>
</p>
      <pre>The alpha-channel of a RGB32-clip is not always well-defined (depending on the source),
this filter is the faster way to apply an all white mask:

clip=ResetMask(clip)</pre>
    <p>&nbsp;</p>
<h2><a name="ColorKeyMask"></a>ColorKeyMask 
  <em>[rgb32]</em></h2>
<p><code>ColorKeyMask </code>(<var>clip, int &quot;color&quot;, int &quot;tolerance&quot;</var>)</p>
<p>Sets the alpha-channel (similar as Mask does) but generates it by comparing 
  the <var>color</var> (default black). Each pixel with a color differing less than
<var> tolerance</var> (default 10) is set to transparent,
  otherwise it is left unchanged (it is NOT set to opaque). <b>See <a href="overlay.htm">Overlay</a>
for examples.</b></p>
<p><kbd>$Date: 2005/01/26 22:08:35 $</kbd></p>
<FORM>
  <INPUT TYPE="Button" VALUE="Back"
onClick="history.go(-1)">
</form>
</body>
</html>
